//====================Binary Class====================
public class Binary implements Comparable{
	//====================Instance Variables====================	
	private int Dec;
	private String Bin;

	//====================Default Constructor====================
	public Binary(){
		Bin = "0";
		Dec = 0;
	}
	
	//====================Overloaded Constructors====================
	public Binary(String bin){
		Bin = bin;
		Dec = binToDec(bin);
	}
	
	public Binary(int dec){
		Bin = decToBin(dec);
		Dec = dec;
	}
	//====================Accessor Methods====================
	public int getBin(){
		return Bin;
	}

	public int getDec(){		
		return Dec;
	}
	
	//====================Mutator Methods====================
	public void setBin(int bin){
		Bin = bin;
		Dec = binToDec(bin);
	}

	public void setDec(int dec){
		Dec = dec;
		Bin = decToBin(dec);
	}

	//====================Methods====================
	public static String decToBin( int n ) {

	int decNum = n;

	int remainder = 0;

	String retBin = "";

	while (decNum > 1) {

	    remainder = decNum%2;

	    retBin = remainder+ retBin;

	    decNum /= 2;

	}

	return retBin;

    }

	public static String decToBinR( int n ) { 

	String retBin = "";

	if (n > 1) {

	    retBin = decToBinR(n / 2) + n % 2;

	}

	return retBin;

    }

  public static int binToDec( String s ) {

	int retDec = 0;

	int exp = 0;

	for (int i = s.length(); i > 0; i--) {

	    retDec += Math.pow(2,exp)*Integer.parseInt(s.substring(i-1, i));

	    exp ++;

	}

	return retDec;

  }
  
  public static int binToDecR( String s ) { 

	int retDec = 0;

	int exp = 0;

	if (s.length() == 0) {

	    retDec += Math.pow(2,exp)*Integer.parseInt(s.substring(s.length()-1, s.length()));

	    exp ++;

	    retDec += binToDecR(s.substring(0,s.length()-1));

	}

	return retDec;

    }
  
	public String toString(){//Returns a string of the objects binary and deimal values.
		return "Binary Num : " + Bin + " Decimal Num : " + Dec;
	}
	
	public int compareTo(Binary b){//Compares this binary object to another binary object.
		if (this.getBin() == b.getBin()) return 0;//Return 0 if this object has a binary value equal to the other object's binary value.
		if (this.getBin() < b.getBin()) return -1;//Return -1 if this object has a binary value less than the other object's binary value.
		if (this.getBin() > b.getBin()) return 1;//Return 1 if this object has a binary value greater than the other object's binary value.
		return -999;//Return -999 in case of failure.
	}
	
	public int compareTo(Object o){//Compares this binary object to another object.
		if (this == o) return 0;//Check for aliasing.
		if (o instanceof Binary) return compareTo((Binary)o);//Compares if object is binary.
		return -1;//Return if not the same object type.	
	}
	
	public boolean equals(Object o){//Returns a boolean value indicating equality between this binary object and another.
		boolean boo = this == o;//Check for aliasing.
		if (!boo) return (o instanceof Binary && this.compareTo((Binary)o) == 0);//If object is binary, check if values are equal.
		return boo;//Return false if not the same object type.
	}
	
	/*====================Main Method====================
	public static void main(String[] args){
	Binary woop = new Binary();
	System.out.println(woop);
	woop.setDec(15);
	System.out.println(woop);
	woop.setBin(11011);
	System.out.println(woop);
	
	Binary lol = new Binary(1001011);
	System.out.println(lol);
	lol.setBin(11011);
	System.out.println(lol);
	System.out.println(lol.compareTo(woop));
	System.out.println(lol.equals(woop));
	lol.setBin(1001111);
	System.out.println(lol);
	System.out.println(lol.compareTo(woop));
	System.out.println(lol.equals(woop));
	}*/
}
